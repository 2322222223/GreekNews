package com.renlz.jiyun.greeknews.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.renlz.jiyun.greeknews.beandao.IsChecks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IS_CHECKS".
*/
public class IsChecksDao extends AbstractDao<IsChecks, Void> {

    public static final String TABLENAME = "IS_CHECKS";

    /**
     * Properties of entity IsChecks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Position = new Property(0, int.class, "position", false, "POSITION");
        public final static Property Isck = new Property(1, boolean.class, "isck", false, "ISCK");
    }


    public IsChecksDao(DaoConfig config) {
        super(config);
    }
    
    public IsChecksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IS_CHECKS\" (" + //
                "\"POSITION\" INTEGER NOT NULL ," + // 0: position
                "\"ISCK\" INTEGER NOT NULL );"); // 1: isck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IS_CHECKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IsChecks entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPosition());
        stmt.bindLong(2, entity.getIsck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IsChecks entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPosition());
        stmt.bindLong(2, entity.getIsck() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public IsChecks readEntity(Cursor cursor, int offset) {
        IsChecks entity = new IsChecks( //
            cursor.getInt(offset + 0), // position
            cursor.getShort(offset + 1) != 0 // isck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IsChecks entity, int offset) {
        entity.setPosition(cursor.getInt(offset + 0));
        entity.setIsck(cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(IsChecks entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(IsChecks entity) {
        return null;
    }

    @Override
    public boolean hasKey(IsChecks entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
